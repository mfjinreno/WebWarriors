/**
 * Created by lucas on 4/9/16.
 */
var BugsId = (function(){
    var id = -1;
    return function(){
        return id++;
    };
})();


var BugModel = function(team, direction, bug, bugId){
    var self = this;
    self.id = BugsId();
    self.team = team;
    self.direction = direction;
    self.bodyId = bug.body;
    self.headId = bug.head;
    self.rgb = bug.rgb;
    self.bugId = bugId;

    self.getGlobalMove = function(move){
        switch(move){
            case BugTokens.MoveForward:
                return self.direction;
                break;
            case BugTokens.MoveRight:
                switch(self.direction){
                    case BugsMoves.Down:
                        return BugsMoves.Left;
                        break;
                    case BugsMoves.Up:
                        return BugsMoves.Right;
                        break;
                    case BugsMoves.Right:
                        return BugsMoves.Down;
                        break;
                    case BugsMoves.Left:
                        return BugsMoves.Up;
                        break;
                }
                break;
            case BugTokens.MoveBackward:
                switch(self.direction){
                    case BugsMoves.Down:
                        return BugsMoves.Up;
                        break;
                    case BugsMoves.Up:
                        return BugsMoves.Down;
                        break;
                    case BugsMoves.Right:
                        return BugsMoves.Left;
                        break;
                    case BugsMoves.Left:
                        return BugsMoves.Right;
                        break;
                }
                break;
            case BugTokens.MoveLeft:
                switch(self.direction){
                    case BugsMoves.Down:
                        return BugsMoves.Right;
                        break;
                    case BugsMoves.Up:
                        return BugsMoves.Left;
                        break;
                    case BugsMoves.Right:
                        return BugsMoves.Up;
                        break;
                    case BugsMoves.Left:
                        return BugsMoves.Down;
                        break;
                }
                break;
            case BugTokens.Infect:
                return BugsMoves.Infect;
                break;
            default:
                return "There was an error parsing bugs move: " + move + " and direction: " + self.direction;

        }
    };

    self.bugInvalidator = function(bugCode){
        var moves = Object.keys(NeighborStatus).map(function(key){
            var status = NeighborStatus[key];
            var result = bugCode(status);
            return self.getGlobalMove(result);
        });
        var invalidMoves = moves.map(function(bugMove){
            var hasInvalidMove = Object.keys(BugsMoves).some(function(moveKey) {
                var move = BugsMoves[moveKey];
                return move === bugMove;
            });
            return hasInvalidMove ? false : bugMove;
        });
        return invalidMoves.reduce(function(a, b){
            if(!a){
                return a;
            } else{
                return !b ? b : a + " AND " + b;
            }
        });
    };

    var code = new BugInterpreter(bug.code);
    self.bugsCode = function(neighbor) {
        return code(neighbor);
    };
    self.isInvalid = self.bugInvalidator(self.bugsCode);

    self.makeMove = function(neighbor){
        if(!self.isInvalid){
            var move = self.bugsCode(neighbor);
            return self.getGlobalMove(move);
        }
    };


};
